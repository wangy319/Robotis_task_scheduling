package main;

import java.io.IOException;
import java.util.ArrayList;

import parsers.G12Parser;
import parsers.JacopParser;
import parts.Task;

public class Printer {

	int interval = 1;

	public Printer(ArrayList<Task> tasks) {
		int latestTask = 0;
		for (Task task : tasks) {
			if (task.start + task.duration > latestTask) {
				latestTask = task.start + task.duration;
			}
		}

		StringBuilder sb = new StringBuilder();

		Task currTask = null;
		while (tasks.size() > 0) {
			Task t = null;
			if (currTask == null) {
				t = findTaskWithLargestPred(tasks);
				if (t == null) {
					break;
				}
			} else {
				t = findTaskWithPredI(currTask.i, tasks);
				if (t == null) {
					currTask = null;
					continue;
				}
			}
			sb.append(
					appendStringFront(
							t.moveTo.print(t.moveTo.duration * 10 + 1),
							getStartIndentation(t.moveTo.start))).append("\n");
			sb.append(
					appendStringFront(t.print(t.duration * 10 + 1),
							getStartIndentation(t.start))).append("\n");
			currTask = t;
		}

		sb.append(getAxis(latestTask * 10));

		System.out.println(sb.toString());
	}

	private Task findTaskWithLargestPred(ArrayList<Task> tasks) {
		Task task = null;

		if (tasks.size() == 0) {
			return null;
		}

		for (Task t : tasks) {
			if (task == null || task.predecessor < t.predecessor) {
				task = t;
			}
		}
		tasks.remove(task);
		return task;
	}

	private Task findTaskWithPredI(int i, ArrayList<Task> tasks) {
		Task task = null;
		for (Task t : tasks) {
			if (t.predecessor == i) {
				task = t;
				break;
			}
		}
		if (task == null) {
			return null;
		}
		tasks.remove(task);
		return task;
	}

	private String getStartIndentation(int duration) {
		StringBuilder sb = new StringBuilder();
		for (int i = 0; i < duration * 10; i++) {
			sb.append(" ");
		}
		return sb.toString();
	}

	private String appendStringFront(String appendTo, String toAppend) {
		String lines[] = appendTo.split("\n");
		StringBuilder sb = new StringBuilder();
		for (int i = 0; i < lines.length; i++) {
			sb.append(toAppend).append(lines[i]);
			if (i < lines.length - 1) {
				sb.append("\n");
			}
		}
		return sb.toString();

	}

	private String getAxis(int length) {
		String out = "0";
		int axisCounter = 0;
		int numberCounter = 1;
		for (int i = 0; i < length; i++) {
			if (axisCounter == interval * 9) {
				String number = "";
				for (char c : ("" + numberCounter).toCharArray()) {
					number += c + "\n";
				}
				out = concatenateStrings(out, number);
				axisCounter = -1;
				numberCounter++;
			} else {
				out = concatenateStrings(out, "-");
			}
			axisCounter++;
		}
		return out.toString();
	}

	private String concatenateStrings(String s1, String s2) {
		String[] lines1 = s1.split("\n");
		String[] lines2 = s2.split("\n");
		int nbrOfLines = Math.max(lines1.length, lines2.length);
		StringBuilder sb = new StringBuilder();
		for (int i = 0; i < nbrOfLines; i++) {
			if (i > lines1.length - 1) {
				sb.append(getIndent(lines1[lines1.length - 1].length()));
			} else {
				sb.append(lines1[i]);
			}
			if (i > lines2.length - 1) {
				sb.append(getIndent(lines2[lines2.length - 1].length()));
			} else {
				sb.append(lines2[i]);
			}
			sb.append("\n");
		}
		return sb.toString();
	}

	private String getIndent(int indent) {
		StringBuilder sb = new StringBuilder();
		for (int i = 0; i < indent; i++) {
			sb.append(" ");
		}
		return sb.toString();
	}

	static final String usage = "This application prints out the results from searches performed with either G12 or JaCoP"
			+ "\nUsage: java -jar Scheduleprinter.jar [OPTIONS] [FILE] [DATAFILE]"
			+ "\n\nOptions:"
			+ "\n-h\tThis message"
			+ "\n-g\tThe file is generated by either G12, Gecode or or-tools"
			+ "\n-j\tThe file is generated by either JaCoP or Choco3";

	public static void main(String[] args) throws IOException {
		if (args.length == 0 || args[0].equals("-h")) {
			System.out.println(usage);
		} else if (args[0].equals("-g")) {
			ArrayList<Task> tasks = G12Parser.parse(args[1]);
			new Printer(tasks);
		} else if (args[0].equals("-j")) {
			if (args.length < 3) {
				System.out.println("Must provide a data file\n\n");
				System.out.println(usage);
				return;
			}
			ArrayList<Task> tasks = JacopParser.parse(args[1], args[2]);
			new Printer(tasks);
		} else {
			System.out.println(usage);
		}
	}
}
